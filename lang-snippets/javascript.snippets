############# MISC
snippet for "for" i
for ($1) {
  $2
}$3
endsnippet

snippet c "curly braces with identation" i
{
  $1
}
endsnippet

snippet fn "named function" i
function $1($2) {
  $3
}$4
endsnippet

snippet ff "anonymous function" i
function($1) {
  $2
}$3
endsnippet

snippet af "arrow function" i
($1) => {
  $2
}$3
endsnippet

snippet fa "one line arrow function" i
($1) => $2
endsnippet

snippet cl "console.log(...)" i
console.log($1)
endsnippet

snippet clj "JSON.stringify formatted" i
console.log(JSON.stringify($1, null, 2))
endsnippet

snippet if "if statement" i
if ($1) {
  $2
}$3
endsnippet

snippet el "else statement" i
else {
  $1
}$2
endsnippet

snippet iife "Immediately-invoked function expression"
(function() {
  'use strict';

  $1
})();
endsnippet

############# Node.js
snippet re "require" b
const `!p
def formatVariableName(path):
  if path == 'react/addons':
    return 'React'

  lastPart = path.split('/')[-1]

  if lastPart == 'lodash':
    return '_'
  elif lastPart == 'jquery':
    return '$'
  else:
    return re.sub(r'[_\-]', '', lastPart.title())

snip.rv = formatVariableName(t[1])
` = require('${1}')$0
endsnippet

snippet me "module.exports" b
module.exports = $0
endsnippet

snippet ee "exports"
exports = $0
endsnippet

snippet rr "just require"
require('$1')
endsnippet

snippet vr "ES5 require"
var $1 = require('$1')
endsnippet

############# JSDoc
snippet cm
/**
 * ${0:${VISUAL}}
 */
endsnippet

snippet pr "@param {...}"
@param {${2:type}} ${1:name} - ${3:description}
endsnippet

snippet rt "@return {...}"
@return {${1:type}} - ${2:description}
endsnippet

snippet ct "@constructor"
@constructor
endsnippet

############# Tests
##### jest
snippet t "add jest test" i
test('$1', () => {
  $2
})
endsnippet

##### end jest

snippet ds "describe a test suite" b
describe('#$1', function() {
  $2
})
endsnippet

snippet it "describe a test" b
it('Should $1', function() {
  $2
})
endsnippet

snippet ae "afterEach" b
afterEach(function($1) {
  $2
})
endsnippet

snippet be "beforeEach" b
beforeEach(function($1) {
  $2
})
endsnippet

snippet ex "expect" b
expect($1).$2
endsnippet

############# ES6
snippet im "import" b
import `!p
def formatVariableName(path):
  if path == 'react':
    return 'React'

  lastPart = path.split('/')[-1]
  if lastPart == 'lodash':
    return '_'
  elif lastPart == 'jquery':
    return '$'
  else:
    return re.sub(r'[_\-]', '', lastPart.title())
snip.rv = formatVariableName(t[1])
` from '${1}'$0
endsnippet

snippet ed "export default"
export default $1
endsnippet

############# Angular 1.x
snippet ng "angular structure" b
(function() {

  'use strict';

  angular
    .module('$1')
    .$2('$3', $3);

  $3.$inject = [];

  function $3() {
    var vm = this;$4

    ///////////// Public Properties

    ///////////// Private Properties

    ///////////// Public Methods

    ///////////// Private Methods

    ///////////// Events

    ///////////// Bootstrap

    ///////////// Function Declarations
  }
})();
endsnippet

snippet ngm "angular module" b
(function() {
  
  'use strict';

  angular
    .module('$1', [$2]);
})();
endsnippet

snippet ngd "angular directive" b
(function() {

  'use strict';

  angular
    .module('$1')
    .directive('$3', $3);

  $3.$inject = [];

  function $3($4) {
    return {
      $5
    };
  }

})();
endsnippet

snippet ngdc "angular directive using controller" b
(function() {

  'use strict';

  angular
    .module('$1')
    .directive('$3', $3);

  $3.$inject = [];

  function $3($4) {
    return {
      restrict: 'EA',
      transclude: false,
      controller: controller,
      controllerAs: 'vm',
      bindToController: true,
      templateUrl: '',
      scope: {$5}
    };
  }

  function controller() {
    var vm = this;

    ///////////// Properties

    ///////////// Methods

    ///////////// Function Declarations
  }

})();
endsnippet

snippet cln "angular console.log" b
$log.log('$1');$2
endsnippet

snippet cljn "angular console.log + JSON.stringify" b
$log.log(JSON.stringify($1, null, 2));$2
endsnippet

# React & JSX
snippet rrcc "React Redux Class Component" b
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import styles from './${2:$1}.css';

class ${1:`!v expand('%:t:r')`} extends Component {
	static propTypes = {
		children: PropTypes.node,
		className: PropTypes.string,
		dispatch: PropTypes.func.isRequired,
	};

	constructor(props) {
		super(props);
	}

	render() {
		return (
			<div className={styles.base}>
				$3
			</div>
		);
	}
}

function mapStateToProps(state) {
	return {};
}

export default connect(mapStateToProps)($1);
endsnippet

snippet rcc "React Class Component" b
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import styles from './${2:$1}.css';

class ${1:`!v expand('%:t:r')`} extends Component {
	static propTypes = {
		${2:children: PropTypes.node,
		className: PropTypes.string,}
	};

	constructor(props) {
		super(props);
	}

	render() {
		return (
			<${3:div} className={styles.base}>
				$0
			</$3>
		);
	}
}

export default $1;
endsnippet

snippet rfc "React Functional Component" b
import React from 'react';
import PropTypes from 'prop-types';
import styles from './${2:$1}.css';

function ${1:`!v expand('%:t:r')`}({ $3 }) {
	return (
		<${5:div} className={styles.base}>
			$0
		</$5>
	);
}

$1.defaultProps = {$4};

$1.propTypes = {`!p
props = t[3]

if props:
  snip >> 1
  for prop in props.split(', '):
    snip += prop + ': PropTypes.any,'
`
};

export default $1;
endsnippet

snippet rsc "React Styled Component" b
import styled from 'styled-components';

const ${1:`!v expand('%:t:r')`} = styled.${2:div}\`
	$3
\`;

export default $1;
endsnippet

snippet rsci "React Styled Component Interpolation" b
import styled, { css } from 'styled-components';

const ${1:`!v expand('%:t:r')`} = styled.${2:div}\`${props => css\`
	${3:${props.$4 && \`
		$5
	\`}}
\`}\`;

export default $1;
endsnippet

snippet pp "Get Props"
${props => props.${1}};
endsnippet

snippet cn "className"
className="$1"
endsnippet

snippet dp "Default Props" b
${1:`!v expand('%:t:r')`.}defaultProps = {
	$2
};
endsnippet

snippet set "Set State"
this.setState({
	${1}: ${2}
});
endsnippet

snippet props "Get Property" i
this.props.${1}
endsnippet

snippet state "Get State" i
this.state.${1}
endsnippet

snippet ref "Ref" i
ref={${1:ref} => { this.${2:name} = $1; }}
endsnippet


# Component Lifecycle
snippet cwm "Component Will Mount" b
componentWillMount() {
	$1
}
endsnippet

snippet cdm "Component Did Mount" b
componentDidMount() {
	$1
}
endsnippet

snippet cwrp "Component Will Receive Props" b
componentWillReceiveProps(nextProps) {
	$1
}
endsnippet

snippet scup "Should Component Update" b
shouldComponentUpdate(nextProps, nextState) {
	$1
}
endsnippet

snippet cwup "Component Will Update" b
componentWillUpdate(nextProps, nextState) {
	$1
}
endsnippet

snippet cdup "Component Did Update" b
componentDidUpdate(prevProps, prevState) {
	$1
}
endsnippet

snippet cwu "Component Will Unmount" b
componentWillUnmount() {
	$1
}
endsnippet

snippet ren "Render"
render() {
	return ${1:(
		${2:<div>${3}</div>}
	);}
}
endsnippet


# PropTypes
snippet pt "PropTypes Definition" b
${1:`!v expand('%:t:r')`.}propTypes = {
	${2:className}: ${3:PropTypes.string},
};
endsnippet

snippet  pt.a "PropTypes Array" w
PropTypes.array${1:,}
endsnippet

snippet   pt.b "PropTypes Boolean" w
PropTypes.bool${1:,}
endsnippet

snippet pt.f "PropTypes Function" w
PropTypes.func${1:,}
endsnippet

snippet pt.n "PropTypes Number" w
PropTypes.number${1:,}
endsnippet

snippet pt.o "PropTypes Object" w
PropTypes.object${1:,}
endsnippet

snippet pt.s "PropType String" w
PropTypes.string${1:,}
endsnippet

snippet pt.no "PropTypes Node" w
PropTypes.node${1:,}
endsnippet

snippet pt.e "PropTypes Element" w
PropTypes.element${1:,}
endsnippet

snippet pt.io "PropTypes instanceOf" w
PropTypes.instanceOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.one "PropTypes oneOf" w
PropTypes.oneOf(['$2'$3])${1:,}
endsnippet

snippet pt.onet "PropTypes oneOfType" w
PropTypes.oneOfType([
	$2
])${1:,}
endsnippet

snippet pt.ao "PropTypes arrayOf" w
PropTypes.arrayOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.oo "PropTypes objectOf" w
PropTypes.objectOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.sh "PropTyes Shape" w
PropTypes.shape({
	$2
})${1:,}
endsnippet

snippet ir "isRequired" w
isRequired,
endsnippet

snippet us.s "useState" w
const [$1, set${1/\w+\s*/\u$0/g}] = useState(${3:''})${0:;}
endsnippet

snippet us.e "useEffect" w
useEffect(() => {
  $1
})${0:;}
endsnippet

snippet us.er "useEffect with return" w
useEffect(() => {
  $1
	return () => {
    $2
	};
})${0:;}
endsnippet

snippet us.c "useContext" w
const $1 = useContext($2)${0:;}
endsnippet

snippet us.r "useReducer" w
const [$1, dispatch] = useReducer($1Reducer, ${2:${VISUAL:initialState}})
const $1Reducer = (state, action) => {
	switch (action.type) {
		default:
			return state;
	}
}${0:;}
endsnippet

snippet us.cb "useCallback" w
useCallback(
	() => {
		$1
	},
	[$2],
)${0:;}
endsnippet

snippet us.m "useMemo" w
const $1 = useMemo(() => {
	$2
}, [$3])${0:;}
endsnippet

snippet us.rf "useRef" w
const $1 = useRef($2)${0:;}
endsnippet
